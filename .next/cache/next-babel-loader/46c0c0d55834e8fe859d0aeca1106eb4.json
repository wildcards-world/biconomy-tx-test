{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport jsonInterface from './WildcardSteward_v3_matic.json'; // import web3 from 'web3'\n\nvar Contract = require('web3-eth-contract');\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n/******\n * HELPER CODE\n */\n\nvar constructMetaTransactionMessage = function constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress) {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nvar getSignatureParameters = function getSignatureParameters(signature) {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nvar executeMetaTransaciton = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAddress, functionSignature, contract, contractAddress, chainId) {\n    var eventEmitter, nonce, messageToSign, signature, _getSignatureParamete, r, s, v;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            eventEmitter = new events.EventEmitter();\n\n            if (!(contract && userAddress && functionSignature, chainId, contractAddress)) {\n              _context.next = 13;\n              break;\n            }\n\n            nonce = 0; // let nonce = await contract.methods.getNonce(userAddress).call();\n\n            messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n            _context.next = 6;\n            return web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress);\n\n          case 6:\n            signature = _context.sent;\n            console.info(\"User signature is \".concat(signature));\n            _getSignatureParamete = getSignatureParameters(signature), r = _getSignatureParamete.r, s = _getSignatureParamete.s, v = _getSignatureParamete.v;\n            console.log(\"before transaction listener\"); // No need to calculate gas limit or gas price here\n            // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n            //     from: userAddress\n            // });\n            // transactionListener.on(\"transactionHash\", (hash)=>{\n            //   eventEmitter.emit(\"transactionHash\", hash);\n            // }).once(\"confirmation\", (confirmation, recipet) => {\n            //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n            // }).on(\"error\", error => {\n            //   eventEmitter.emit(\"error\", error);\n            // });\n\n            return _context.abrupt(\"return\", eventEmitter);\n\n          case 13:\n            console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function executeMetaTransaciton(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/******\n * HELPER CODE -end\n */\n\n\nexport var Biconomy = function Biconomy() {\n  _s();\n\n  var context = useWeb3React();\n  var connector = context.connector,\n      library = context.library,\n      chainId = context.chainId,\n      account = context.account,\n      activate = context.activate,\n      deactivate = context.deactivate,\n      active = context.active,\n      error = context.error;\n  console.log(\"account\", account);\n  Contract.setProvider(library);\n  var contractAddress = '0x59b3c176c39bd8734717492f4da8fe26ff6a454d';\n  var contract = new Contract(jsonInterface.abi, contractAddress); // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({\n    cmethods: contract.methods\n  });\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var functionSignature, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"execute biconomy tx\");\n              functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n              console.log(\"VERY IMPORTANT RESULT\", result); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n              //     from: account\n              // });\n\n              _context2.next = 5;\n              return executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\");\n\n            case 5:\n              result = _context2.sent;\n              result.on(\"transactionHash\", function (hash) {\n                // On transacion Hash\n                console.log('hash', {\n                  hash: hash\n                });\n              }).once(\"confirmation\", function (confirmation, recipet) {\n                console.log('confirmation', {\n                  confirmation: confirmation,\n                  recipet: recipet\n                }); // On Confirmation\n              }).on(\"error\", function (error) {// On Error  \n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTransaction() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, \"Send Tx\");\n};\n\n_s(Biconomy, \"jU3KfNXIbYTKyYZlheOpN604GoM=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = Biconomy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Biconomy\");","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Contract","require","toBuffer","abi","events","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","messageToSign","eth","personal","sign","toString","console","info","log","Biconomy","context","connector","library","account","activate","deactivate","active","error","setProvider","cmethods","methods","sendTransaction","testFunctionThatDoesNothing","encodeABI","result","on","hash","once","confirmation","recipet"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport jsonInterface from './WildcardSteward_v3_matic.json'\n// import web3 from 'web3'\n\nvar Contract = require('web3-eth-contract');\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\n/******\n * HELPER CODE\n */\n\n\n  const constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n     return abi.soliditySHA3(\n        [\"uint256\",\"address\",\"uint256\",\"bytes\"],\n        [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n    );\n  }\n\n  const getSignatureParameters = signature => {\n    if (!web3.utils.isHexStrict(signature)) {\n      throw new Error(\n        'Given value \"'.concat(signature, '\" is not a valid hex string.')\n      );\n    }\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = web3.utils.hexToNumber(v);\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId) => {\n  var eventEmitter = new events.EventEmitter();\n  if(contract && userAddress && functionSignature, chainId, contractAddress) {\n    let nonce = 0;\n    // let nonce = await contract.methods.getNonce(userAddress).call();\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n}\n/******\n * HELPER CODE -end\n */\n\nexport const Biconomy = () => {\n  const context = useWeb3React()\n  const { connector, library, chainId, account, activate, deactivate, active, error } = context\n\n  console.log(\"account\",account)\n  Contract.setProvider(library);\n  const contractAddress = '0x59b3c176c39bd8734717492f4da8fe26ff6a454d'\n\n  var contract = new Contract(jsonInterface.abi, contractAddress)\n  // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({cmethods: contract.methods});\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\")\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result);\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\");\n    \n    result.on(\"transactionHash\", (hash) => {\n      // On transacion Hash\n      console.log('hash',{hash})\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      console.log('confirmation',{confirmation, recipet})\n      // On Confirmation\n    }).on(\"error\", error => {\n      // On Error  \n    })\n  }\n\n  return (\n    <button onClick={sendTransaction}>Send Tx</button> \n  )\n}\n"]},"metadata":{},"sourceType":"module"}