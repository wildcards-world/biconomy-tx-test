{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { NetworkConnector } from '@web3-react/network-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { TrezorConnector } from '@web3-react/trezor-connector';\nimport { FrameConnector } from '@web3-react/frame-connector';\nimport { AuthereumConnector } from '@web3-react/authereum-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { MagicConnector } from '@web3-react/magic-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { SquarelinkConnector } from '@web3-react/squarelink-connector';\nimport { TorusConnector } from '@web3-react/torus-connector';\nvar POLLING_INTERVAL = 12000;\nvar RPC_URLS = {\n  1: process.env.RPC_URL_1,\n  4: process.env.RPC_URL_4\n};\nexport var injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\nexport var network = new NetworkConnector({\n  urls: {\n    1: RPC_URLS[1],\n    4: RPC_URLS[4]\n  },\n  defaultChainId: 1\n});\nexport var walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: RPC_URLS[1]\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\nexport var walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'web3-react example'\n});\nexport var ledger = new LedgerConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL\n});\nexport var trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n});\nexport var frame = new FrameConnector({\n  supportedChainIds: [1]\n});\nexport var authereum = new AuthereumConnector({\n  chainId: 42\n});\nexport var fortmatic = new FortmaticConnector({\n  apiKey: process.env.FORTMATIC_API_KEY,\n  chainId: 4\n});\nexport var magic = new MagicConnector({\n  apiKey: process.env.MAGIC_API_KEY,\n  chainId: 4,\n  email: 'hello@example.org'\n});\nexport var portis = new PortisConnector({\n  dAppId: process.env.PORTIS_DAPP_ID,\n  networks: [1, 100]\n});\nexport var squarelink = new SquarelinkConnector({\n  clientId: process.env.SQUARELINK_CLIENT_ID,\n  networks: [1, 100]\n});\nexport var torus = new TorusConnector({\n  chainId: 1\n});","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/connectors.ts"],"names":["InjectedConnector","NetworkConnector","WalletConnectConnector","WalletLinkConnector","LedgerConnector","TrezorConnector","FrameConnector","AuthereumConnector","FortmaticConnector","MagicConnector","PortisConnector","SquarelinkConnector","TorusConnector","POLLING_INTERVAL","RPC_URLS","process","env","RPC_URL_1","RPC_URL_4","injected","supportedChainIds","network","urls","defaultChainId","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName","ledger","chainId","trezor","manifestEmail","manifestAppUrl","frame","authereum","fortmatic","apiKey","FORTMATIC_API_KEY","magic","MAGIC_API_KEY","email","portis","dAppId","PORTIS_DAPP_ID","networks","squarelink","clientId","SQUARELINK_CLIENT_ID","torus"],"mappings":"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","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { FrameConnector } from '@web3-react/frame-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector'\nimport { MagicConnector } from '@web3-react/magic-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { SquarelinkConnector } from '@web3-react/squarelink-connector'\nimport { TorusConnector } from '@web3-react/torus-connector'\n\nconst POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.RPC_URL_1 as string,\n  4: process.env.RPC_URL_4 as string\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n\nexport const network = new NetworkConnector({\n  urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'web3-react example'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const frame = new FrameConnector({ supportedChainIds: [1] })\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n\nexport const fortmatic = new FortmaticConnector({ apiKey: process.env.FORTMATIC_API_KEY as string, chainId: 4 })\n\nexport const magic = new MagicConnector({\n  apiKey: process.env.MAGIC_API_KEY as string,\n  chainId: 4,\n  email: 'hello@example.org'\n})\n\nexport const portis = new PortisConnector({ dAppId: process.env.PORTIS_DAPP_ID as string, networks: [1, 100] })\n\nexport const squarelink = new SquarelinkConnector({\n  clientId: process.env.SQUARELINK_CLIENT_ID as string,\n  networks: [1, 100]\n})\n\nexport const torus = new TorusConnector({ chainId: 1 })\n"]},"metadata":{},"sourceType":"module"}