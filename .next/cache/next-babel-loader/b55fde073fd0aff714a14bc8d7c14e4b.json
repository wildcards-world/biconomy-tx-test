{"ast":null,"code":"var _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nconst getSignatureParameters = signature => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId, web3) => {\n  var eventEmitter = new events.EventEmitter();\n\n  if (contract && userAddress && functionSignature, chainId, contractAddress) {\n    let nonce = 0; // let nonce = await contract.methods.getNonce(userAddress).call();\n\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n    const signature = await web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress);\n    console.info(`User signature is ${signature}`);\n    let {\n      r,\n      s,\n      v\n    } = getSignatureParameters(signature);\n    console.log(\"before transaction listener\"); // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n};\n/******\n * HELPER CODE -end\n */\n\n\nexport const Biconomy = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error\n  } = context;\n  console.log({\n    library\n  });\n  if (!library) __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Loading\");\n  console.log(\"account\", account);\n  Contract.setProvider(library.provider);\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n  var contract = new Contract(jsonInterface.abi, contractAddress); // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({\n    cmethods: contract.methods\n  });\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\");\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\", web3);\n    result.on(\"transactionHash\", hash => {\n      // On transacion Hash\n      console.log(\"hash\", {\n        hash\n      });\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      console.log(\"confirmation\", {\n        confirmation,\n        recipet\n      }); // On Confirmation\n    }).on(\"error\", error => {// On Error\n    });\n  };\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 10\n    }\n  }, \"Send Tx\");\n};","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Web3","Contract","require","toBuffer","abi","events","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","messageToSign","eth","personal","sign","toString","console","info","log","Biconomy","context","connector","library","account","activate","deactivate","active","error","setProvider","provider","cmethods","methods","sendTransaction","testFunctionThatDoesNothing","encodeABI","result","on","hash","once","confirmation","recipet"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (\n  nonce,\n  chainId,\n  functionSignature,\n  contractAddress\n) => {\n  return abi.soliditySHA3(\n    [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n    [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n  );\n};\n\nconst getSignatureParameters = (signature) => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error(\n      'Given value \"'.concat(signature, '\" is not a valid hex string.')\n    );\n  }\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v,\n  };\n};\n\nconst executeMetaTransaciton = async (\n  userAddress,\n  functionSignature,\n  contract,\n  contractAddress,\n  chainId,\n  web3\n) => {\n  var eventEmitter = new events.EventEmitter();\n  if (\n    (contract && userAddress && functionSignature, chainId, contractAddress)\n  ) {\n    let nonce = 0;\n    // let nonce = await contract.methods.getNonce(userAddress).call();\n    let messageToSign = constructMetaTransactionMessage(\n      nonce,\n      chainId,\n      functionSignature,\n      contractAddress\n    );\n\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\n      \"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\"\n    );\n  }\n};\n/******\n * HELPER CODE -end\n */\n\nexport const Biconomy = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n\n  console.log({ library });\n  if (!library) <h2>Loading</h2>;\n\n  console.log(\"account\", account);\n  Contract.setProvider(library.provider);\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n\n  var contract = new Contract(jsonInterface.abi, contractAddress);\n  // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({ cmethods: contract.methods });\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\");\n    let functionSignature = contract.methods\n      .testFunctionThatDoesNothing(account)\n      .encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result);\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n    let result = await executeMetaTransaciton(\n      account,\n      functionSignature,\n      contract,\n      contractAddress,\n      \"4\",\n      web3\n    );\n\n    result\n      .on(\"transactionHash\", (hash) => {\n        // On transacion Hash\n        console.log(\"hash\", { hash });\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        console.log(\"confirmation\", { confirmation, recipet });\n        // On Confirmation\n      })\n      .on(\"error\", (error) => {\n        // On Error\n      });\n  };\n\n  return <button onClick={sendTransaction}>Send Tx</button>;\n};\n"]},"metadata":{},"sourceType":"module"}