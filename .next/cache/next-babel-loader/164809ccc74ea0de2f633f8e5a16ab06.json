{"ast":null,"code":"var _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\nimport Biconomy from \"@biconomy/mexa\";\n\nconst {\n  signDaiPermit\n} = require(\"./dist/eth-permit\"); // const { signDaiPermit } = require(\"eth-permit\");\n\n/******\n * HELPER CODE\n */\n\n\nconst constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nconst getSignatureParameters = signature => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId, web3) => {\n  var eventEmitter = new events.EventEmitter();\n\n  if (contract && userAddress && functionSignature, chainId, contractAddress) {\n    // let nonce = 0;\n    let nonce = await contract.methods.getNonce(userAddress).call(); // console.log(\"The nonce is:\", nonce);\n\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress); // console.log(\"web3\", web3);\n    // console.log(\"web3.eth\", web3.eth);\n    // console.log(\"web3.eth.personal\", web3.eth.personal);\n    // const signature = await web3.eth.sign(\n\n    const signature = await web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress); // console.info(`User signature is ${signature}`);\n\n    let {\n      r,\n      s,\n      v\n    } = getSignatureParameters(signature);\n\n    try {\n      fetch(`https://api.biconomy.io/api/v2/meta-tx/native`, {\n        method: \"POST\",\n        headers: {\n          \"x-api-key\": \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify({\n          to: contractAddress,\n          apiId: \"e0dd72a6-78e0-44f8-b56e-902c1b519ffa\",\n          params: [userAddress, functionSignature, r, s, v],\n          // params: [userAddress, functionData, r, s, v],\n          from: userAddress\n        })\n      }).then(response => response.json()).then(function (result) {\n        console.log(result);\n        console.log(`Transaction sent by relayer with hash ${result.txHash}`);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    } catch (error) {\n      console.log(error);\n    } // No need to calculate gas limit or gas price here\n\n\n    let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n      from: userAddress\n    });\n    transactionListener.on(\"transactionHash\", hash => {\n      eventEmitter.emit(\"transactionHash\", hash);\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    }).on(\"error\", error => {\n      eventEmitter.emit(\"error\", error);\n    });\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n};\n/******\n * HELPER CODE -end\n */\n\n\nexport const BiconomyComponent = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error\n  } = context;\n  let {\n    0: hasSent,\n    1: setHasSent\n  } = useState(false);\n  if (!library) return __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 24\n    }\n  }, \"Loading\");\n  if (!account) return __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 24\n    }\n  }, \"Loading\");\n\n  if (!hasSent) {\n    console.log(\"Before eth-permit - using this account:\", account); // signDaiPermit(\n    //   library.provider,\n    //   // window.ethereum,\n    //   \"0x0099f841a6ab9a082828fac66134fd25c9d8a195\",\n    //   account,\n    //   \"0x89e2d4628435368a7CD72611E769dDe27802b95e\",\n    //   ).then((result) => console.log(\"this is the result!\", result));\n\n    const msgParams = [{\n      type: 'string',\n      // Any valid solidity type\n      name: 'Message',\n      // Any string label you want\n      value: 'Hi, Alice!' // The value to sign\n\n    }, {\n      type: 'uint32',\n      name: 'A number',\n      value: '1337'\n    }];\n    web3.currentProvider.sendAsync({\n      method: 'eth_signTypedData',\n      params: [msgParams, from],\n      from: from\n    }, function (err, result) {\n      console.log({\n        err,\n        result\n      });\n    });\n    setHasSent(true);\n    console.log(\"Busy signing\");\n  }\n\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n  const biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true\n  });\n  const web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(jsonInterface.abi, contractAddress);\n\n  const sendTransaction = async () => {\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI(); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //   from: account,\n    // });\n\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\", web3Biconomy); // result\n    //   .on(\"transactionHash\", (hash) => {\n    //     // On transacion Hash\n    //     console.log(\"hash\", { hash });\n    //   })\n    //   .once(\"confirmation\", (confirmation, recipet) => {\n    //     console.log(\"confirmation\", { confirmation, recipet });\n    //     // On Confirmation\n    //   })\n    //   .on(\"error\", (error) => {\n    //     // On Error\n    //   });\n  };\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 10\n    }\n  }, \"Send Tx\");\n};","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","useState","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Web3","Contract","require","toBuffer","abi","events","Biconomy","signDaiPermit","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","methods","getNonce","call","messageToSign","eth","personal","sign","toString","fetch","method","headers","body","JSON","stringify","to","apiId","params","from","then","response","json","result","console","log","txHash","catch","error","transactionListener","executeMetaTransaction","send","on","hash","emit","once","confirmation","recipet","BiconomyComponent","context","connector","library","account","activate","deactivate","active","hasSent","setHasSent","msgParams","type","name","value","currentProvider","sendAsync","err","provider","biconomy","apiKey","debug","web3Biconomy","sendTransaction","testFunctionThatDoesNothing","encodeABI"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\nimport Biconomy from \"@biconomy/mexa\";\n\nconst { signDaiPermit } = require(\"./dist/eth-permit\");\n// const { signDaiPermit } = require(\"eth-permit\");\n\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (\n  nonce,\n  chainId,\n  functionSignature,\n  contractAddress\n) => {\n  return abi.soliditySHA3(\n    [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n    [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n  );\n};\n\nconst getSignatureParameters = (signature) => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error(\n      'Given value \"'.concat(signature, '\" is not a valid hex string.')\n    );\n  }\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v,\n  };\n};\n\nconst executeMetaTransaciton = async (\n  userAddress,\n  functionSignature,\n  contract,\n  contractAddress,\n  chainId,\n  web3\n) => {\n  var eventEmitter = new events.EventEmitter();\n  if (\n    (contract && userAddress && functionSignature, chainId, contractAddress)\n  ) {\n    // let nonce = 0;\n    let nonce = await contract.methods.getNonce(userAddress).call();\n    // console.log(\"The nonce is:\", nonce);\n    let messageToSign = constructMetaTransactionMessage(\n      nonce,\n      chainId,\n      functionSignature,\n      contractAddress\n    );\n\n    // console.log(\"web3\", web3);\n    // console.log(\"web3.eth\", web3.eth);\n    // console.log(\"web3.eth.personal\", web3.eth.personal);\n\n    // const signature = await web3.eth.sign(\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    // console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    try {\n      fetch(`https://api.biconomy.io/api/v2/meta-tx/native`, {\n        method: \"POST\",\n        headers: {\n          \"x-api-key\": \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({\n          to: contractAddress,\n          apiId: \"e0dd72a6-78e0-44f8-b56e-902c1b519ffa\",\n          params: [userAddress, functionSignature, r, s, v],\n          // params: [userAddress, functionData, r, s, v],\n          from: userAddress,\n        }),\n      })\n        .then((response) => response.json())\n        .then(function (result) {\n          console.log(result);\n          console.log(`Transaction sent by relayer with hash ${result.txHash}`);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n\n    // No need to calculate gas limit or gas price here\n    let transactionListener = contract.methods\n      .executeMetaTransaction(userAddress, functionSignature, r, s, v)\n      .send({\n        from: userAddress,\n      });\n\n    transactionListener\n      .on(\"transactionHash\", (hash) => {\n        eventEmitter.emit(\"transactionHash\", hash);\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        eventEmitter.emit(\"confirmation\", confirmation, recipet);\n      })\n      .on(\"error\", (error) => {\n        eventEmitter.emit(\"error\", error);\n      });\n\n    return eventEmitter;\n  } else {\n    console.log(\n      \"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\"\n    );\n  }\n};\n/******\n * HELPER CODE -end\n */\n\nexport const BiconomyComponent = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n  let [hasSent, setHasSent] = useState(false);\n\n  if (!library) return <h2>Loading</h2>;\n  if (!account) return <h2>Loading</h2>;\n  if (!hasSent) {\n    console.log(\"Before eth-permit - using this account:\", account)\n  // signDaiPermit(\n  //   library.provider,\n  //   // window.ethereum,\n  //   \"0x0099f841a6ab9a082828fac66134fd25c9d8a195\",\n  //   account,\n  //   \"0x89e2d4628435368a7CD72611E769dDe27802b95e\",\n  //   ).then((result) => console.log(\"this is the result!\", result));\n\n  const msgParams = [\n  {\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: 'Hi, Alice!'  // The value to sign\n },\n {   \n   type: 'uint32',\n      name: 'A number',\n      value: '1337'\n  }\n]\n\n    web3.currentProvider.sendAsync({\n    method: 'eth_signTypedData',\n    params: [msgParams, from],\n    from: from,\n  }, function (err, result) {\n    console.log({err, result})\n  })\n    setHasSent(true);\n    console.log(\"Busy signing\")\n  }\n    \n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n\n  const biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true,\n  });\n\n  const web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(\n    jsonInterface.abi,\n    contractAddress\n  );\n\n  const sendTransaction = async () => {\n    let functionSignature = contract.methods\n      .testFunctionThatDoesNothing(account)\n      .encodeABI();\n\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //   from: account,\n    // });\n    let result = await executeMetaTransaciton(\n      account,\n      functionSignature,\n      contract,\n      contractAddress,\n      \"4\",\n      web3Biconomy\n    );\n\n    // result\n    //   .on(\"transactionHash\", (hash) => {\n    //     // On transacion Hash\n    //     console.log(\"hash\", { hash });\n    //   })\n    //   .once(\"confirmation\", (confirmation, recipet) => {\n    //     console.log(\"confirmation\", { confirmation, recipet });\n    //     // On Confirmation\n    //   })\n    //   .on(\"error\", (error) => {\n    //     // On Error\n    //   });\n  };\n\n  return <button onClick={sendTransaction}>Send Tx</button>;\n};\n"]},"metadata":{},"sourceType":"module"}