{"ast":null,"code":"var _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\nimport Biconomy from \"@biconomy/mexa\";\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nconst getSignatureParameters = signature => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId, web3) => {\n  var eventEmitter = new events.EventEmitter();\n\n  if (contract && userAddress && functionSignature, chainId, contractAddress) {\n    // let nonce = 0;\n    let nonce = await contract.methods.getNonce(userAddress).call(); // console.log(\"The nonce is:\", nonce);\n\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress); // console.log(\"web3\", web3);\n    // console.log(\"web3.eth\", web3.eth);\n    // console.log(\"web3.eth.personal\", web3.eth.personal);\n    // const signature = await web3.eth.sign(\n\n    const signature = await web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress); // console.info(`User signature is ${signature}`);\n\n    let {\n      r,\n      s,\n      v\n    } = getSignatureParameters(signature); // console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n\n    let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n      from: userAddress\n    });\n    transactionListener.on(\"transactionHash\", hash => {\n      eventEmitter.emit(\"transactionHash\", hash);\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    }).on(\"error\", error => {\n      eventEmitter.emit(\"error\", error);\n    });\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n};\n/******\n * HELPER CODE -end\n */\n\n\nexport const BiconomyComponent = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error\n  } = context; // console.log({ library });\n\n  if (!library) return __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 24\n    }\n  }, \"Loading\"); // console.log(\"account\", account);\n  // Contract.setProvider(library.provider);\n\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n  const biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true\n  });\n  const web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(jsonInterface.abi, contractAddress);\n\n  const sendTransaction = async () => {\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI(); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //   from: account,\n    // });\n\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\", web3Biconomy);\n    result.on(\"transactionHash\", hash => {\n      // On transacion Hash\n      console.log(\"hash\", {\n        hash\n      });\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      console.log(\"confirmation\", {\n        confirmation,\n        recipet\n      }); // On Confirmation\n    }).on(\"error\", error => {// On Error\n    });\n  };\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 10\n    }\n  }, \"Send Tx\");\n};","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Web3","Contract","require","toBuffer","abi","events","Biconomy","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","methods","getNonce","call","messageToSign","eth","personal","sign","toString","transactionListener","executeMetaTransaction","send","from","on","hash","emit","once","confirmation","recipet","error","console","log","BiconomyComponent","context","connector","library","account","activate","deactivate","active","provider","biconomy","apiKey","debug","web3Biconomy","sendTransaction","testFunctionThatDoesNothing","encodeABI","result"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\nimport Biconomy from \"@biconomy/mexa\";\n\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (\n  nonce,\n  chainId,\n  functionSignature,\n  contractAddress\n) => {\n  return abi.soliditySHA3(\n    [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n    [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n  );\n};\n\nconst getSignatureParameters = (signature) => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error(\n      'Given value \"'.concat(signature, '\" is not a valid hex string.')\n    );\n  }\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v,\n  };\n};\n\nconst executeMetaTransaciton = async (\n  userAddress,\n  functionSignature,\n  contract,\n  contractAddress,\n  chainId,\n  web3\n) => {\n  var eventEmitter = new events.EventEmitter();\n  if (\n    (contract && userAddress && functionSignature, chainId, contractAddress)\n  ) {\n    // let nonce = 0;\n    let nonce = await contract.methods.getNonce(userAddress).call();\n    // console.log(\"The nonce is:\", nonce);\n    let messageToSign = constructMetaTransactionMessage(\n      nonce,\n      chainId,\n      functionSignature,\n      contractAddress\n    );\n\n    // console.log(\"web3\", web3);\n    // console.log(\"web3.eth\", web3.eth);\n    // console.log(\"web3.eth.personal\", web3.eth.personal);\n\n    // const signature = await web3.eth.sign(\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    // console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    // console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n    let transactionListener = contract.methods\n      .executeMetaTransaction(userAddress, functionSignature, r, s, v)\n      .send({\n        from: userAddress,\n      });\n\n    transactionListener\n      .on(\"transactionHash\", (hash) => {\n        eventEmitter.emit(\"transactionHash\", hash);\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        eventEmitter.emit(\"confirmation\", confirmation, recipet);\n      })\n      .on(\"error\", (error) => {\n        eventEmitter.emit(\"error\", error);\n      });\n\n    return eventEmitter;\n  } else {\n    console.log(\n      \"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\"\n    );\n  }\n};\n/******\n * HELPER CODE -end\n */\n\nexport const BiconomyComponent = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n\n  // console.log({ library });\n  if (!library) return <h2>Loading</h2>;\n\n  // console.log(\"account\", account);\n  // Contract.setProvider(library.provider);\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n\n  const biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true,\n  });\n\n  const web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(\n    jsonInterface.abi,\n    contractAddress\n  );\n\n  const sendTransaction = async () => {\n    let functionSignature = contract.methods\n      .testFunctionThatDoesNothing(account)\n      .encodeABI();\n\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //   from: account,\n    // });\n    let result = await executeMetaTransaciton(\n      account,\n      functionSignature,\n      contract,\n      contractAddress,\n      \"4\",\n      web3Biconomy\n    );\n\n    result\n      .on(\"transactionHash\", (hash) => {\n        // On transacion Hash\n        console.log(\"hash\", { hash });\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        console.log(\"confirmation\", { confirmation, recipet });\n        // On Confirmation\n      })\n      .on(\"error\", (error) => {\n        // On Error\n      });\n  };\n\n  return <button onClick={sendTransaction}>Send Tx</button>;\n};\n"]},"metadata":{},"sourceType":"module"}