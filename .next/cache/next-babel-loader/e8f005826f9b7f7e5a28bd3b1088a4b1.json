{"ast":null,"code":"var _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport jsonInterface from './WildcardSteward_v3_matic.json'; // import web3 from 'web3'\n\nvar Contract = require('web3-eth-contract');\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nconst getSignatureParameters = signature => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId) => {\n  var eventEmitter = new events.EventEmitter();\n\n  if (contract && userAddress && functionSignature, chainId, contractAddress) {\n    let nonce = 0; // let nonce = await contract.methods.getNonce(userAddress).call();\n\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n    const signature = await web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress);\n    console.info(`User signature is ${signature}`);\n    let {\n      r,\n      s,\n      v\n    } = getSignatureParameters(signature);\n    console.log(\"before transaction listener\"); // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n};\n/******\n * HELPER CODE -end\n */\n\n\nexport const Biconomy = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error\n  } = context;\n  console.log(\"account\", account);\n  Contract.setProvider(library);\n  const contractAddress = '0x59b3c176c39bd8734717492f4da8fe26ff6a454d';\n  var contract = new Contract(jsonInterface.abi, contractAddress); // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({\n    cmethods: contract.methods\n  });\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\");\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\");\n    result.on(\"transactionHash\", hash => {\n      // On transacion Hash\n      console.log('hash', {\n        hash\n      });\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      console.log('confirmation', {\n        confirmation,\n        recipet\n      }); // On Confirmation\n    }).on(\"error\", error => {// On Error  \n    });\n  };\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, \"Send Tx\");\n};","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Contract","require","toBuffer","abi","events","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","messageToSign","eth","personal","sign","toString","console","info","log","Biconomy","context","connector","library","account","activate","deactivate","active","error","setProvider","cmethods","methods","sendTransaction","testFunctionThatDoesNothing","encodeABI","result","on","hash","once","confirmation","recipet"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,uBAA1C,QAAyE,kBAAzE;AACA,OAAOC,aAAP,MAA0B,iCAA1B,C,CACA;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA;;;;AAKE,MAAMC,+BAA+B,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,iBAAjB,EAAoCC,eAApC,KAAwD;AAC7F,SAAON,GAAG,CAACO,YAAJ,CACJ,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,OAA/B,CADI,EAEJ,CAACJ,KAAD,EAAQG,eAAR,EAAyBF,OAAzB,EAAkCL,QAAQ,CAACM,iBAAD,CAA1C,CAFI,CAAP;AAIF,CALD;;AAOA,MAAMG,sBAAsB,GAAGC,SAAS,IAAI;AAC1C,MAAI,CAACC,IAAI,CAACC,KAAL,CAAWC,WAAX,CAAuBH,SAAvB,CAAL,EAAwC;AACtC,UAAM,IAAII,KAAJ,CACJ,gBAAgBC,MAAhB,CAAuBL,SAAvB,EAAkC,8BAAlC,CADI,CAAN;AAGD;;AACD,MAAIM,CAAC,GAAGN,SAAS,CAACO,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAR;AACA,MAAIC,CAAC,GAAG,KAAKH,MAAL,CAAYL,SAAS,CAACO,KAAV,CAAgB,EAAhB,EAAoB,GAApB,CAAZ,CAAR;AACA,MAAIE,CAAC,GAAG,KAAKJ,MAAL,CAAYL,SAAS,CAACO,KAAV,CAAgB,GAAhB,EAAqB,GAArB,CAAZ,CAAR;AACAE,EAAAA,CAAC,GAAGR,IAAI,CAACC,KAAL,CAAWQ,WAAX,CAAuBD,CAAvB,CAAJ;AACA,MAAI,CAAC,CAAC,EAAD,EAAK,EAAL,EAASE,QAAT,CAAkBF,CAAlB,CAAL,EAA2BA,CAAC,IAAI,EAAL;AAC3B,SAAO;AACLH,IAAAA,CAAC,EAAEA,CADE;AAELE,IAAAA,CAAC,EAAEA,CAFE;AAGLC,IAAAA,CAAC,EAAEA;AAHE,GAAP;AAKD,CAhBD;;AAkBF,MAAMG,sBAAsB,GAAG,OAAOC,WAAP,EAAoBjB,iBAApB,EAAuCkB,QAAvC,EAAiDjB,eAAjD,EAAkEF,OAAlE,KAA8E;AAC3G,MAAIoB,YAAY,GAAG,IAAIvB,MAAM,CAACwB,YAAX,EAAnB;;AACA,MAAGF,QAAQ,IAAID,WAAZ,IAA2BjB,iBAA3B,EAA8CD,OAA9C,EAAuDE,eAA1D,EAA2E;AACzE,QAAIH,KAAK,GAAG,CAAZ,CADyE,CAEzE;;AACA,QAAIuB,aAAa,GAAGxB,+BAA+B,CAACC,KAAD,EAAQC,OAAR,EAAiBC,iBAAjB,EAAoCC,eAApC,CAAnD;AAEA,UAAMG,SAAS,GAAG,MAAMC,IAAI,CAACiB,GAAL,CAASC,QAAT,CAAkBC,IAAlB,CACtB,OAAOH,aAAa,CAACI,QAAd,CAAuB,KAAvB,CADe,EAEtBR,WAFsB,CAAxB;AAKAS,IAAAA,OAAO,CAACC,IAAR,CAAc,qBAAoBvB,SAAU,EAA5C;AACA,QAAI;AAAEM,MAAAA,CAAF;AAAKE,MAAAA,CAAL;AAAQC,MAAAA;AAAR,QAAcV,sBAAsB,CAACC,SAAD,CAAxC;AAEAsB,IAAAA,OAAO,CAACE,GAAR,CAAY,6BAAZ,EAbyE,CAczE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAOT,YAAP;AACD,GA5BD,MA4BO;AACLO,IAAAA,OAAO,CAACE,GAAR,CAAY,wGAAZ;AACD;AACF,CAjCD;AAkCA;;;;;AAIA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,QAAMC,OAAO,GAAGzC,YAAY,EAA5B;AACA,QAAM;AAAE0C,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBjC,IAAAA,OAAtB;AAA+BkC,IAAAA,OAA/B;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA,UAAlD;AAA8DC,IAAAA,MAA9D;AAAsEC,IAAAA;AAAtE,MAAgFP,OAAtF;AAEAJ,EAAAA,OAAO,CAACE,GAAR,CAAY,SAAZ,EAAsBK,OAAtB;AACAzC,EAAAA,QAAQ,CAAC8C,WAAT,CAAqBN,OAArB;AACA,QAAM/B,eAAe,GAAG,4CAAxB;AAEA,MAAIiB,QAAQ,GAAG,IAAI1B,QAAJ,CAAaD,aAAa,CAACI,GAA3B,EAAgCM,eAAhC,CAAf,CAR4B,CAS5B;AACA;AACA;AACA;;AAEAyB,EAAAA,OAAO,CAACE,GAAR,CAAY;AAACW,IAAAA,QAAQ,EAAErB,QAAQ,CAACsB;AAApB,GAAZ;;AAEA,QAAMC,eAAe,GAAG,YAAY;AAClCf,IAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACA,QAAI5B,iBAAiB,GAAGkB,QAAQ,CAACsB,OAAT,CAAiBE,2BAAjB,CAA6CT,OAA7C,EAAsDU,SAAtD,EAAxB;AACAjB,IAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ,EAAqCgB,MAArC,EAHkC,CAIlC;AACA;AACA;;AACA,QAAIA,MAAM,GAAG,MAAM5B,sBAAsB,CAACiB,OAAD,EAAUjC,iBAAV,EAA6BkB,QAA7B,EAAuCjB,eAAvC,EAAwD,GAAxD,CAAzC;AAEA2C,IAAAA,MAAM,CAACC,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACrC;AACApB,MAAAA,OAAO,CAACE,GAAR,CAAY,MAAZ,EAAmB;AAACkB,QAAAA;AAAD,OAAnB;AACD,KAHD,EAGGC,IAHH,CAGQ,cAHR,EAGwB,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACjDvB,MAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA2B;AAACoB,QAAAA,YAAD;AAAeC,QAAAA;AAAf,OAA3B,EADiD,CAEjD;AACD,KAND,EAMGJ,EANH,CAMM,OANN,EAMeR,KAAK,IAAI,CACtB;AACD,KARD;AASD,GAlBD;;AAoBA,SACE;AAAQ,IAAA,OAAO,EAAEI,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;AAGD,CAvCM","sourcesContent":["import React from 'react'\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport jsonInterface from './WildcardSteward_v3_matic.json'\n// import web3 from 'web3'\n\nvar Contract = require('web3-eth-contract');\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\n/******\n * HELPER CODE\n */\n\n\n  const constructMetaTransactionMessage = (nonce, chainId, functionSignature, contractAddress) => {\n     return abi.soliditySHA3(\n        [\"uint256\",\"address\",\"uint256\",\"bytes\"],\n        [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n    );\n  }\n\n  const getSignatureParameters = signature => {\n    if (!web3.utils.isHexStrict(signature)) {\n      throw new Error(\n        'Given value \"'.concat(signature, '\" is not a valid hex string.')\n      );\n    }\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = web3.utils.hexToNumber(v);\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v\n    };\n  };\n\nconst executeMetaTransaciton = async (userAddress, functionSignature, contract, contractAddress, chainId) => {\n  var eventEmitter = new events.EventEmitter();\n  if(contract && userAddress && functionSignature, chainId, contractAddress) {\n    let nonce = 0;\n    // let nonce = await contract.methods.getNonce(userAddress).call();\n    let messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n  }\n}\n/******\n * HELPER CODE -end\n */\n\nexport const Biconomy = () => {\n  const context = useWeb3React()\n  const { connector, library, chainId, account, activate, deactivate, active, error } = context\n\n  console.log(\"account\",account)\n  Contract.setProvider(library);\n  const contractAddress = '0x59b3c176c39bd8734717492f4da8fe26ff6a454d'\n\n  var contract = new Contract(jsonInterface.abi, contractAddress)\n  // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({cmethods: contract.methods});\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\")\n    let functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result);\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n    let result = await executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\");\n    \n    result.on(\"transactionHash\", (hash) => {\n      // On transacion Hash\n      console.log('hash',{hash})\n    }).once(\"confirmation\", (confirmation, recipet) => {\n      console.log('confirmation',{confirmation, recipet})\n      // On Confirmation\n    }).on(\"error\", error => {\n      // On Error  \n    })\n  }\n\n  return (\n    <button onClick={sendTransaction}>Send Tx</button> \n  )\n}\n"]},"metadata":{},"sourceType":"module"}