{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\nimport Biconomy from \"@biconomy/mexa\";\n/******\n * HELPER CODE\n */\n\nvar constructMetaTransactionMessage = function constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress) {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nvar getSignatureParameters = function getSignatureParameters(signature) {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nvar executeMetaTransaciton = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAddress, functionSignature, contract, contractAddress, chainId, web3) {\n    var eventEmitter, nonce, messageToSign, signature, _getSignatureParamete, r, s, v, transactionListener;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            eventEmitter = new events.EventEmitter();\n\n            if (!(contract && userAddress && functionSignature, chainId, contractAddress)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 4;\n            return contract.methods.getNonce(userAddress).call();\n\n          case 4:\n            nonce = _context.sent;\n            // console.log(\"The nonce is:\", nonce);\n            messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress); // console.log(\"web3\", web3);\n            // console.log(\"web3.eth\", web3.eth);\n            // console.log(\"web3.eth.personal\", web3.eth.personal);\n            // const signature = await web3.eth.sign(\n\n            _context.next = 8;\n            return web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress);\n\n          case 8:\n            signature = _context.sent;\n            // console.info(`User signature is ${signature}`);\n            _getSignatureParamete = getSignatureParameters(signature), r = _getSignatureParamete.r, s = _getSignatureParamete.s, v = _getSignatureParamete.v;\n\n            try {\n              fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", {\n                method: \"POST\",\n                headers: {\n                  \"x-api-key\": \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n                  \"Content-Type\": \"application/json;charset=utf-8\"\n                },\n                body: JSON.stringify({\n                  to: contractAddress,\n                  apiId: \"e0dd72a6-78e0-44f8-b56e-902c1b519ffa\",\n                  params: [userAddress, functionSignature, r, s, v],\n                  // params: [userAddress, functionData, r, s, v],\n                  from: userAddress\n                })\n              }).then(function (response) {\n                return response.json();\n              }).then(function (result) {\n                console.log(result);\n                console.log(\"Transaction sent by relayer with hash \".concat(result.txHash));\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n            } catch (error) {\n              console.log(error);\n            } // No need to calculate gas limit or gas price here\n\n\n            transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n              from: userAddress\n            });\n            transactionListener.on(\"transactionHash\", function (hash) {\n              eventEmitter.emit(\"transactionHash\", hash);\n            }).once(\"confirmation\", function (confirmation, recipet) {\n              eventEmitter.emit(\"confirmation\", confirmation, recipet);\n            }).on(\"error\", function (error) {\n              eventEmitter.emit(\"error\", error);\n            });\n            return _context.abrupt(\"return\", eventEmitter);\n\n          case 16:\n            console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function executeMetaTransaciton(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/******\n * HELPER CODE -end\n */\n\n\nexport var BiconomyComponent = function BiconomyComponent() {\n  _s();\n\n  var context = useWeb3React();\n  var connector = context.connector,\n      library = context.library,\n      chainId = context.chainId,\n      account = context.account,\n      activate = context.activate,\n      deactivate = context.deactivate,\n      active = context.active,\n      error = context.error;\n  if (!library) return __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 24\n    }\n  }, \"Loading\");\n  web3 = new Web3(library.provider);\n  var contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n  var biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true\n  });\n  var web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(jsonInterface.abi, contractAddress);\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var functionSignature, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI(); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n              //   from: account,\n              // });\n\n              _context2.next = 3;\n              return executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\", web3Biconomy);\n\n            case 3:\n              result = _context2.sent;\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTransaction() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 10\n    }\n  }, \"Send Tx\");\n};\n\n_s(BiconomyComponent, \"jU3KfNXIbYTKyYZlheOpN604GoM=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = BiconomyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BiconomyComponent\");","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Web3","Contract","require","toBuffer","abi","events","Biconomy","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","methods","getNonce","call","messageToSign","eth","personal","sign","toString","fetch","method","headers","body","JSON","stringify","to","apiId","params","from","then","response","json","result","console","log","txHash","error","transactionListener","executeMetaTransaction","send","on","hash","emit","once","confirmation","recipet","BiconomyComponent","context","connector","library","account","activate","deactivate","active","provider","biconomy","apiKey","debug","web3Biconomy","sendTransaction","testFunctionThatDoesNothing","encodeABI"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\nimport Biconomy from \"@biconomy/mexa\";\n\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (\n  nonce,\n  chainId,\n  functionSignature,\n  contractAddress\n) => {\n  return abi.soliditySHA3(\n    [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n    [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n  );\n};\n\nconst getSignatureParameters = (signature) => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error(\n      'Given value \"'.concat(signature, '\" is not a valid hex string.')\n    );\n  }\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v,\n  };\n};\n\nconst executeMetaTransaciton = async (\n  userAddress,\n  functionSignature,\n  contract,\n  contractAddress,\n  chainId,\n  web3\n) => {\n  var eventEmitter = new events.EventEmitter();\n  if (\n    (contract && userAddress && functionSignature, chainId, contractAddress)\n  ) {\n    // let nonce = 0;\n    let nonce = await contract.methods.getNonce(userAddress).call();\n    // console.log(\"The nonce is:\", nonce);\n    let messageToSign = constructMetaTransactionMessage(\n      nonce,\n      chainId,\n      functionSignature,\n      contractAddress\n    );\n\n    // console.log(\"web3\", web3);\n    // console.log(\"web3.eth\", web3.eth);\n    // console.log(\"web3.eth.personal\", web3.eth.personal);\n\n    // const signature = await web3.eth.sign(\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    // console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    try {\n      fetch(`https://api.biconomy.io/api/v2/meta-tx/native`, {\n        method: \"POST\",\n        headers: {\n          \"x-api-key\": \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({\n          to: contractAddress,\n          apiId: \"e0dd72a6-78e0-44f8-b56e-902c1b519ffa\",\n          params: [userAddress, functionSignature, r, s, v],\n          // params: [userAddress, functionData, r, s, v],\n          from: userAddress,\n        }),\n      })\n        .then((response) => response.json())\n        .then(function (result) {\n          console.log(result);\n          console.log(`Transaction sent by relayer with hash ${result.txHash}`);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n\n    // No need to calculate gas limit or gas price here\n    let transactionListener = contract.methods\n      .executeMetaTransaction(userAddress, functionSignature, r, s, v)\n      .send({\n        from: userAddress,\n      });\n\n    transactionListener\n      .on(\"transactionHash\", (hash) => {\n        eventEmitter.emit(\"transactionHash\", hash);\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        eventEmitter.emit(\"confirmation\", confirmation, recipet);\n      })\n      .on(\"error\", (error) => {\n        eventEmitter.emit(\"error\", error);\n      });\n\n    return eventEmitter;\n  } else {\n    console.log(\n      \"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\"\n    );\n  }\n};\n/******\n * HELPER CODE -end\n */\n\nexport const BiconomyComponent = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n\n  if (!library) return <h2>Loading</h2>;\n\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n\n  const biconomy = new Biconomy(library.provider, {\n    apiKey: \"IUNMuYhZ7.9c178f07-e191-4877-b995-ef4b61ed956f\",\n    debug: true,\n  });\n\n  const web3Biconomy = new Web3(biconomy);\n  var contract = new web3Biconomy.eth.Contract(\n    jsonInterface.abi,\n    contractAddress\n  );\n\n  const sendTransaction = async () => {\n    let functionSignature = contract.methods\n      .testFunctionThatDoesNothing(account)\n      .encodeABI();\n\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //   from: account,\n    // });\n    let result = await executeMetaTransaciton(\n      account,\n      functionSignature,\n      contract,\n      contractAddress,\n      \"4\",\n      web3Biconomy\n    );\n\n    // result\n    //   .on(\"transactionHash\", (hash) => {\n    //     // On transacion Hash\n    //     console.log(\"hash\", { hash });\n    //   })\n    //   .once(\"confirmation\", (confirmation, recipet) => {\n    //     console.log(\"confirmation\", { confirmation, recipet });\n    //     // On Confirmation\n    //   })\n    //   .on(\"error\", (error) => {\n    //     // On Error\n    //   });\n  };\n\n  return <button onClick={sendTransaction}>Send Tx</button>;\n};\n"]},"metadata":{},"sourceType":"module"}