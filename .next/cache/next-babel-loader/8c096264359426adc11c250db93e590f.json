{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n/******\n * HELPER CODE\n */\n\nvar constructMetaTransactionMessage = function constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress) {\n  return abi.soliditySHA3([\"uint256\", \"address\", \"uint256\", \"bytes\"], [nonce, contractAddress, chainId, toBuffer(functionSignature)]);\n};\n\nvar getSignatureParameters = function getSignatureParameters(signature) {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error('Given value \"'.concat(signature, '\" is not a valid hex string.'));\n  }\n\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n};\n\nvar executeMetaTransaciton = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAddress, functionSignature, contract, contractAddress, chainId, web3) {\n    var eventEmitter, nonce, messageToSign, signature, _getSignatureParamete, r, s, v;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            eventEmitter = new events.EventEmitter();\n\n            if (!(contract && userAddress && functionSignature, chainId, contractAddress)) {\n              _context.next = 13;\n              break;\n            }\n\n            nonce = 0; // let nonce = await contract.methods.getNonce(userAddress).call();\n\n            messageToSign = constructMetaTransactionMessage(nonce, chainId, functionSignature, contractAddress);\n            _context.next = 6;\n            return web3.eth.personal.sign(\"0x\" + messageToSign.toString(\"hex\"), userAddress);\n\n          case 6:\n            signature = _context.sent;\n            console.info(\"User signature is \".concat(signature));\n            _getSignatureParamete = getSignatureParameters(signature), r = _getSignatureParamete.r, s = _getSignatureParamete.s, v = _getSignatureParamete.v;\n            console.log(\"before transaction listener\"); // No need to calculate gas limit or gas price here\n            // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n            //     from: userAddress\n            // });\n            // transactionListener.on(\"transactionHash\", (hash)=>{\n            //   eventEmitter.emit(\"transactionHash\", hash);\n            // }).once(\"confirmation\", (confirmation, recipet) => {\n            //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n            // }).on(\"error\", error => {\n            //   eventEmitter.emit(\"error\", error);\n            // });\n\n            return _context.abrupt(\"return\", eventEmitter);\n\n          case 13:\n            console.log(\"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function executeMetaTransaciton(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/******\n * HELPER CODE -end\n */\n\n\nexport var Biconomy = function Biconomy() {\n  _s();\n\n  var context = useWeb3React();\n  var connector = context.connector,\n      library = context.library,\n      chainId = context.chainId,\n      account = context.account,\n      activate = context.activate,\n      deactivate = context.deactivate,\n      active = context.active,\n      error = context.error;\n  console.log({\n    library: library\n  });\n  if (!library) __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Loading\");\n  console.log(\"account\", account);\n  Contract.setProvider(library.provider);\n  web3 = new Web3(library.provider);\n  var contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n  var contract = new Contract(jsonInterface.abi, contractAddress); // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({\n    cmethods: contract.methods\n  });\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var functionSignature, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"execute biconomy tx\");\n              functionSignature = contract.methods.testFunctionThatDoesNothing(account).encodeABI();\n              console.log(\"VERY IMPORTANT RESULT\", result); // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n              //     from: account\n              // });\n\n              _context2.next = 5;\n              return executeMetaTransaciton(account, functionSignature, contract, contractAddress, \"4\", web3);\n\n            case 5:\n              result = _context2.sent;\n              result.on(\"transactionHash\", function (hash) {\n                // On transacion Hash\n                console.log(\"hash\", {\n                  hash: hash\n                });\n              }).once(\"confirmation\", function (confirmation, recipet) {\n                console.log(\"confirmation\", {\n                  confirmation: confirmation,\n                  recipet: recipet\n                }); // On Confirmation\n              }).on(\"error\", function (error) {// On Error\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTransaction() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 10\n    }\n  }, \"Send Tx\");\n};\n\n_s(Biconomy, \"jU3KfNXIbYTKyYZlheOpN604GoM=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = Biconomy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Biconomy\");","map":{"version":3,"sources":["/home/jasoons/Documents/code/spikes/biconomy-tx-test/components/testBiconomy.js"],"names":["React","Web3ReactProvider","useWeb3React","UnsupportedChainIdError","jsonInterface","Web3","Contract","require","toBuffer","abi","events","constructMetaTransactionMessage","nonce","chainId","functionSignature","contractAddress","soliditySHA3","getSignatureParameters","signature","web3","utils","isHexStrict","Error","concat","r","slice","s","v","hexToNumber","includes","executeMetaTransaciton","userAddress","contract","eventEmitter","EventEmitter","messageToSign","eth","personal","sign","toString","console","info","log","Biconomy","context","connector","library","account","activate","deactivate","active","error","setProvider","provider","cmethods","methods","sendTransaction","testFunctionThatDoesNothing","encodeABI","result","on","hash","once","confirmation","recipet"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport jsonInterface from \"./WildcardSteward_v3_matic.json\";\nimport Web3 from \"web3\";\n\nvar Contract = require(\"web3-eth-contract\");\n\nimport { toBuffer } from \"ethereumjs-util\";\nimport abi from \"ethereumjs-abi\";\nimport events from \"events\";\n\n/******\n * HELPER CODE\n */\n\nconst constructMetaTransactionMessage = (\n  nonce,\n  chainId,\n  functionSignature,\n  contractAddress\n) => {\n  return abi.soliditySHA3(\n    [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n    [nonce, contractAddress, chainId, toBuffer(functionSignature)]\n  );\n};\n\nconst getSignatureParameters = (signature) => {\n  if (!web3.utils.isHexStrict(signature)) {\n    throw new Error(\n      'Given value \"'.concat(signature, '\" is not a valid hex string.')\n    );\n  }\n  var r = signature.slice(0, 66);\n  var s = \"0x\".concat(signature.slice(66, 130));\n  var v = \"0x\".concat(signature.slice(130, 132));\n  v = web3.utils.hexToNumber(v);\n  if (![27, 28].includes(v)) v += 27;\n  return {\n    r: r,\n    s: s,\n    v: v,\n  };\n};\n\nconst executeMetaTransaciton = async (\n  userAddress,\n  functionSignature,\n  contract,\n  contractAddress,\n  chainId,\n  web3\n) => {\n  var eventEmitter = new events.EventEmitter();\n  if (\n    (contract && userAddress && functionSignature, chainId, contractAddress)\n  ) {\n    let nonce = 0;\n    // let nonce = await contract.methods.getNonce(userAddress).call();\n    let messageToSign = constructMetaTransactionMessage(\n      nonce,\n      chainId,\n      functionSignature,\n      contractAddress\n    );\n\n    const signature = await web3.eth.personal.sign(\n      \"0x\" + messageToSign.toString(\"hex\"),\n      userAddress\n    );\n\n    console.info(`User signature is ${signature}`);\n    let { r, s, v } = getSignatureParameters(signature);\n\n    console.log(\"before transaction listener\");\n    // No need to calculate gas limit or gas price here\n    // let transactionListener = contract.methods.executeMetaTransaction(userAddress, functionSignature, r, s, v).send({\n    //     from: userAddress\n    // });\n\n    // transactionListener.on(\"transactionHash\", (hash)=>{\n    //   eventEmitter.emit(\"transactionHash\", hash);\n    // }).once(\"confirmation\", (confirmation, recipet) => {\n    //   eventEmitter.emit(\"confirmation\", confirmation, recipet);\n    // }).on(\"error\", error => {\n    //   eventEmitter.emit(\"error\", error);\n    // });\n\n    return eventEmitter;\n  } else {\n    console.log(\n      \"All params userAddress, functionSignature, chainId, contract address and contract object are mandatory\"\n    );\n  }\n};\n/******\n * HELPER CODE -end\n */\n\nexport const Biconomy = () => {\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n\n  console.log({ library });\n  if (!library) <h2>Loading</h2>;\n\n  console.log(\"account\", account);\n  Contract.setProvider(library.provider);\n  web3 = new Web3(library.provider);\n  const contractAddress = \"0x59b3c176c39bd8734717492f4da8fe26ff6a454d\";\n\n  var contract = new Contract(jsonInterface.abi, contractAddress);\n  // console.log(\"the library\", {library});\n  // let web3 = new Web3(library);\n  // console.log(\"web3\", {web3})\n  // Web3EthContract.setProvider(web3);\n\n  console.log({ cmethods: contract.methods });\n\n  const sendTransaction = async () => {\n    console.log(\"execute biconomy tx\");\n    let functionSignature = contract.methods\n      .testFunctionThatDoesNothing(account)\n      .encodeABI();\n    console.log(\"VERY IMPORTANT RESULT\", result);\n    // let result = contract.methods.testFunctionThatDoesNothing(account).send({\n    //     from: account\n    // });\n    let result = await executeMetaTransaciton(\n      account,\n      functionSignature,\n      contract,\n      contractAddress,\n      \"4\",\n      web3\n    );\n\n    result\n      .on(\"transactionHash\", (hash) => {\n        // On transacion Hash\n        console.log(\"hash\", { hash });\n      })\n      .once(\"confirmation\", (confirmation, recipet) => {\n        console.log(\"confirmation\", { confirmation, recipet });\n        // On Confirmation\n      })\n      .on(\"error\", (error) => {\n        // On Error\n      });\n  };\n\n  return <button onClick={sendTransaction}>Send Tx</button>;\n};\n"]},"metadata":{},"sourceType":"module"}